<div class="flex justify-center mt-4" x-data="paginationHandler('<%= paginationType %>', <%= currentPage %>, <%= pageCount %>)">
  <ul class="flex list-none">
    <li>
      <button @click="prevPage()" class="px-3 py-2 mx-1 rounded-md text-white hover:bg-gray-400 hover:text-gray-800 transition duration-300 cursor-pointer" :class="{ 'bg-gray-700': currentPage === 1 }">
        <i class="fas fa-angle-double-left"></i>
      </button>
    </li>
    <li>
      <button @click="decrementPage()" class="px-3 py-2 mx-1 rounded-md text-white hover:bg-gray-400 hover:text-gray-800 transition duration-300 cursor-pointer" :class="{ 'bg-gray-700': currentPage === 1 }">
        <i class="fas fa-angle-left"></i>
      </button>
    </li>
    <template x-for="page in [...Array(pageCount).keys()].map(i => i + 1)" :key="page">
      <li>
        <button @click="goToPage(page)" class="px-3 py-2 mx-1 rounded-md text-white hover:bg-gray-400 hover:text-gray-800 transition duration-300 cursor-pointer" :class="{ 'bg-blue-600': currentPage === page }">
          <span x-text="page" class="text-white"></span>
        </button>
      </li>
    </template>
    <li>
      <button @click="incrementPage()" class="px-3 py-2 mx-1 rounded-md text-white hover:bg-gray-400 hover:text-gray-800 transition duration-300 cursor-pointer" :class="{ 'bg-gray-700': currentPage === pageCount }">
        <i class="fas fa-angle-right"></i>
      </button>
    </li>
    <li>
      <button @click="nextPage()" class="px-3 py-2 mx-1 rounded-md text-white hover:bg-gray-400 hover:text-gray-800 transition duration-300 cursor-pointer" :class="{ 'bg-gray-700': currentPage === pageCount }">
        <i class="fas fa-angle-double-right"></i>
      </button>
    </li>
  </ul>
</div>

<script>
  function paginationHandler(type, currentPage, pageCount) {
    return {
      currentPage: currentPage,
      pageCount: pageCount,

      goToPage(page) {
        this.currentPage = page;
        this.updateUrl();
      },
      prevPage() {
        if (this.currentPage > 1) this.currentPage--;
        this.updateUrl();
      },
      decrementPage() {
        if (this.currentPage > 1) this.currentPage--;
        this.updateUrl();
      },
      incrementPage() {
        if (this.currentPage < this.pageCount) this.currentPage++;
        this.updateUrl();
      },
      nextPage() {
        if (this.currentPage < this.pageCount) this.currentPage++;
        this.updateUrl();
      },
      updateUrl() {
        const url = new URL(window.location);

        if (type === 'none') {
          url.searchParams.set('page', this.currentPage);
        } else if (type === 'movie') {
          url.searchParams.set('pageMovies', this.currentPage);
        } else if (type === 'serie') {
          url.searchParams.set('pageSeries', this.currentPage);
        }
        
        window.history.pushState({}, '', url);
        window.location.reload();
      }
    }
  }
</script>