// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id               Int                   @id @default(autoincrement())
  userName         String
  email            String                @unique
  password         String
  favMovies        UserMovieFavorite[]
  favSeries        UserSerieFavorite[]
  favGenres        UserGenreFavorite[]
  favSeasons       UserSeasonFavorite[]
  favEpisodes      UserEpisodeFavorite[]
  ratingsInMovie   UserMovieRating[]
  ratingsInSerie   UserSerieRating[]
  ratingsInSeason  UserSeasonRating[]
  ratingsInEpisode UserEpisodeRating[]
  ratingsInGenre   UserGenreRating[]
  comments         Comment[]
  followers        UserFollow[]          @relation("Followers")
  following        UserFollow[]          @relation("Following")
  chats            UserChat[]
  messagesSent     Message[]             @relation("Sender")
  messagesReceived Message[]             @relation("Reciever")
}

model UserFollow {
  id          Int    @id @default(autoincrement())
  state       String
  follower    User   @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  Int
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId Int
}

model UserChat {
  id     Int  @id @default(autoincrement())
  userId Int
  chatId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Chat {
  id           Int        @id @default(autoincrement())
  participants UserChat[]
  messages     Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  text       String
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId   Int
  receiver   User?    @relation("Reciever", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId Int?
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId     Int
  createdAt  DateTime @default(now())
  status     String   @default("Pending")
}

model Movie {
  id                   Int                 @id @default(autoincrement())
  title                String              @default("")
  photoSrc             String              @default("")
  trailerSrc           String              @default("")
  duration             String              @default("")
  ratingImdb           Float               @default(5.0)
  releaseYear          Int                 @default(2023)
  description          String              @default("")
  cast                 CastMovie[]
  genres               MovieGenre[]
  comments             Comment[]
  usersWhoBookmarkedIt UserMovieFavorite[]
  usersWhoRatedIt      UserMovieRating[]
}

model CastMovie {
  id      Int   @id @default(autoincrement())
  movieId Int
  actorId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actor   Actor @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CastSerie {
  id      Int   @id @default(autoincrement())
  serieId Int
  actorId Int
  serie   Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Actor {
  id            Int         @id @default(autoincrement())
  name          String
  starredMovies CastMovie[]
  starredSeries CastSerie[]
}

model MovieGenre {
  id      Int   @id @default(autoincrement())
  movieId Int
  genreId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Genre {
  id                   Int                 @id @default(autoincrement())
  name                 String              @default("")
  movies               MovieGenre[]
  comments             Comment[]
  usersWhoBookmarkedIt UserGenreFavorite[]
  usersWhoRatedIt      UserGenreRating[]
}

model Serie {
  id                   Int                 @id @default(autoincrement())
  title                String              @default("")
  photoSrc             String              @default("")
  releaseYear          Int                 @default(2020)
  ratingImdb           Float               @default(5.0)
  cast                 CastSerie[]
  seasons              Season[]
  comments             Comment[]
  usersWhoBookmarkedIt UserSerieFavorite[]
  usersWhoRatedIt      UserSerieRating[]
}

model Season {
  id                   Int                  @id @default(autoincrement())
  title                String               @default("")
  photoSrc             String               @default("")
  releaseYear          Int                  @default(2020)
  ratingImdb           Float                @default(5.0)
  serieId              Int                  @default(1)
  serie                Serie                @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodes             Episode[]
  comments             Comment[]
  usersWhoBookmarkedIt UserSeasonFavorite[]
  usersWhoRatedIt      UserSeasonRating[]
}

model Episode {
  id                   Int                   @id @default(autoincrement())
  title                String                @default("")
  photoSrc             String                @default("")
  videoSrc             String                @default("")
  description          String                @default("")
  seasonId             Int
  season               Season                @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments             Comment[]
  usersWhoBookmarkedIt UserEpisodeFavorite[]
  usersWhoRatedIt      UserEpisodeRating[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @default("")
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int?
  serieId   Int?
  episodeId Int?
  genreId   Int?
  seasonId  Int?
  movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serie     Serie?   @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  season    Season?  @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genre     Genre?   @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserMovieRating {
  id      Int   @id @default(autoincrement())
  rating  Float
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSerieRating {
  id      Int   @id @default(autoincrement())
  rating  Float
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serieId Int
  serie   Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSeasonRating {
  id       Int    @id @default(autoincrement())
  rating   Float
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId Int
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserEpisodeRating {
  id        Int     @id @default(autoincrement())
  rating    Float
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int
  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserGenreRating {
  id      Int   @id @default(autoincrement())
  rating  Float
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserMovieFavorite {
  id      Int   @id @default(autoincrement())
  userId  Int
  movieId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserGenreFavorite {
  id      Int   @id @default(autoincrement())
  userId  Int
  genreId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSerieFavorite {
  id      Int   @id @default(autoincrement())
  userId  Int
  serieId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serie   Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserEpisodeFavorite {
  id        Int     @id @default(autoincrement())
  userId    Int
  episodeId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSeasonFavorite {
  id       Int    @id @default(autoincrement())
  userId   Int
  seasonId Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
